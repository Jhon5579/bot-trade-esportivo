# Nome do nosso fluxo de trabalho de automação
name: Rodar Bot de Trade Esportivo

# Gatilho: como e quando essa automação deve rodar
on:
  schedule:
    # A mágica está aqui: esta é uma expressão 'cron' que significa "Aos 0 minutos, a cada 4 horas, todos os dias"
    - cron: '0 */4 * * *'
  workflow_dispatch:
    # Isso adiciona um botão "Run workflow" na aba Actions para que você possa rodar manualmente quando quiser

# Tarefas: o que o robô deve fazer
jobs:
  run-bot:
    # Usa a versão mais recente do sistema operacional Ubuntu como ambiente
    runs-on: ubuntu-latest

    steps:
    # Passo 1: Baixar o código do seu repositório para o ambiente do robô
    - name: 1. Baixar o código
      uses: actions/checkout@v4

    # Passo 2: Configurar o ambiente Python
    - name: 2. Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # Passo 3: Instalar as dependências necessárias
    - name: 3. Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Passo 4: Executar o bot principal (main.py)
    - name: 4. Executar o bot principal
      env:
        API_KEY: ${{ secrets.API_KEY }}
        API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
        TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: python main.py

    # Passo 5: Salvar as alterações nos arquivos JSON
    - name: 5. Salvar alterações (Commit & Push)
      run: |
        git config --global user.name 'GitHub Actions Bot'
        git config --global user.email 'actions@github.com'
        git add catalogo_times.json apostas_pendentes.json
        # Apenas faz o commit se houver alguma alteração nos arquivos
        git diff --quiet && git diff --staged --quiet || (git commit -m "Atualização automática de arquivos JSON"; git push)
